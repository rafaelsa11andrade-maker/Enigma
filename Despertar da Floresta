// Projeto completo Next.js pronto para deploy, corrigido e funcional

// 1. package.json
{
  "name": "enigma-site",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "framer-motion": "^10.12.16",
    "next": "^14.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}

// 2. Estrutura de pastas
// - pages/index.js (c√≥digo do site)
// - components/ui/index.js (Button, Input, Card)
// - public/ (imagens, se necess√°rio)

// 3. components/ui/index.js
import React from 'react';

export function Button({ children, ...props }) {
  return <button {...props} className='bg-green-700 hover:bg-green-600 rounded p-2'>{children}</button>;
}

export function Input(props) {
  return <input {...props} className='p-2 rounded border border-green-600 bg-green-800 text-white' />;
}

export function Card({ children, ...props }) {
  return <div {...props} className='p-4 rounded-lg bg-green-900'>{children}</div>;
}

// 4. pages/index.js
import React, { useState, useEffect, useRef } from 'react';
import { Button, Input, Card } from '../components/ui';
import { motion } from 'framer-motion';

export default function EnigmaSite() {
  const DEFAULT_QUESTION = "Eu sou papel muito importante para vida e para certos processos e al√©m disso sou uma parte de um c√≥digo o que eu sou??";
  const CORRECT_ANSWER = "Amino√°cidos";

  const SECRET_QUESTION = "Quantos amino√°cidos s√£o essenciais ?";
  const SECRET_ANSWER = "20";

  const [question, setQuestion] = useState(DEFAULT_QUESTION);
  const [input, setInput] = useState('');
  const [history, setHistory] = useState([]);
  const [secretUnlocked, setSecretUnlocked] = useState(false);
  const [finalMessage, setFinalMessage] = useState('');
  const [showImage, setShowImage] = useState(false);
  const viewRef = useRef(null);

  useEffect(() => {
    viewRef.current?.scrollTo({ top: viewRef.current.scrollHeight, behavior: 'smooth' });
  }, [history, finalMessage]);

  function handleSubmit(e) {
    e.preventDefault();
    const trimmed = input.trim();
    if (!trimmed) return;

    if (question === DEFAULT_QUESTION) {
      if (trimmed === CORRECT_ANSWER) {
        setHistory([...history, { question, answer: trimmed, correct: true }]);
        setSecretUnlocked(true);
        setQuestion(SECRET_QUESTION);
      } else {
        setHistory([...history, { question, answer: trimmed, correct: false }]);
      }
    } else if (question === SECRET_QUESTION) {
      if (trimmed === SECRET_ANSWER) {
        setHistory([...history, { question, answer: trimmed, correct: true }]);
        setFinalMessage('‚úÖ Parab√©ns! Voc√™s descobriram o dia que come√ßa o Despertar da Floresta: o chamado da natureza... espero voc√™s l√° Agentesüå≤');
        setShowImage(true);
      } else {
        setHistory([...history, { question, answer: trimmed, correct: false }]);
      }
    }

    setInput('');
  }

  return (
    <div className="min-h-screen bg-green-950 text-white grid place-items-center p-4">
      <Card className="w-full max-w-3xl p-6 bg-green-900/80 border border-green-700 rounded-2xl shadow-lg">
        <div ref={viewRef} className="overflow-auto max-h-[60vh] font-mono text-sm mb-4">
          {history.map((item, index) => (
            <motion.div key={index} initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2 }}>
              <span className={item.correct ? 'text-green-400' : 'text-red-400'}>&gt; {item.answer}</span> - {item.correct ? '‚úÖ' : '‚ùå'}
            </motion.div>
          ))}
        </div>

        {!finalMessage && (
          <form onSubmit={handleSubmit} className="flex flex-col gap-4">
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="font-semibold text-lg">
              {question}
            </motion.div>
            <Input value={input} onChange={(e) => setInput(e.target.value)} placeholder="Digite sua resposta..." />
            <Button type="submit">Enviar</Button>
          </form>
        )}

        {finalMessage && (
          <div className="flex flex-col items-center gap-4">
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="font-bold text-lg">
              {finalMessage}
            </motion.div>
            {showImage && (
              <motion.img
                src="https://upload.wikimedia.org/wikipedia/commons/8/89/Amino_Acids.svg"
                alt="Amino√°cidos"
                className="max-w-full rounded-lg"
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5 }}
              />
            )}
          </div>
        )}
      </Card>
    </div>
  );
}

